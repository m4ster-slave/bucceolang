use crate::runtime_error::RuntimeError;
use crate::Token;

/// Represents the different types of expressions in the abstract syntax tree (AST).
///
/// The `Expr` enum defines the nodes of the expression tree generated by the parser.
#[derive(Debug, Clone)]
pub enum Expr {
    /// Represents a literal value (e.g., number, string, boolean, nil).
    Literal(LiteralExpr),
    /// Represents a parenthesized expression used for grouping.
    Grouping(GroupingExpr),
    /// Represents a unary operation (e.g., negation, logical NOT).
    Unary(UnaryExpr),
    /// Represents a binary operation (e.g., addition, subtraction, comparison).
    Binary(BinaryExpr),
    Variable(VariableExpr),
}

/// Defines the visitor trait for traversing the `Expr` abstract syntax tree.
///
/// Types that implement this trait can visit each type of expression node in the AST.
/// This is a key component of the Visitor pattern, used for operations like
/// interpretation or static analysis.
///
/// The type parameter `T` represents the return type of the visitor methods.
pub trait ExprVisitor<T> {
    /// Visits a `LiteralExpr` node.
    ///
    /// # Arguments
    ///
    /// * `expr` - A reference to the `LiteralExpr` node to visit.
    ///
    /// # Returns
    ///
    /// A `Result` containing the visitor's result or a `RuntimeError`.
    fn visit_literal_expr(&self, expr: &LiteralExpr) -> Result<T, RuntimeError>;

    /// Visits a `GroupingExpr` node.
    ///
    /// # Arguments
    ///
    /// * `expr` - A reference to the `GroupingExpr` node to visit.
    ///
    /// # Returns
    ///
    /// A `Result` containing the visitor's result or a `RuntimeError`.
    fn visit_grouping_expr(&self, expr: &GroupingExpr) -> Result<T, RuntimeError>;

    /// Visits a `UnaryExpr` node.
    ///
    /// # Arguments
    ///
    /// * `expr` - A reference to the `UnaryExpr` node to visit.
    ///
    /// # Returns
    ///
    /// A `Result` containing the visitor's result or a `RuntimeError`.
    fn visit_unary_expr(&self, expr: &UnaryExpr) -> Result<T, RuntimeError>;

    /// Visits a `BinaryExpr` node.
    ///
    /// # Arguments
    ///
    /// * `expr` - A reference to the `BinaryExpr` node to visit.
    ///
    /// # Returns
    ///
    /// A `Result` containing the visitor's result or a `RuntimeError`.
    fn visit_binary_expr(&self, expr: &BinaryExpr) -> Result<T, RuntimeError>;

    /// Visits a `VariableExpr` node.
    ///
    /// # Arguments
    ///
    /// * `expr` - A reference to the `VariableExpr` node to visit.
    ///
    /// # Returns
    ///
    /// A `Result` containing the visitor's result or a `RuntimeError`.
    fn visit_variable_expr(&self, expr: &VariableExpr) -> Result<T, RuntimeError>;
}

impl Expr {
    /// Accepts a visitor and dispatches the call to the appropriate `visit` method
    /// based on the specific type of the `Expr`.
    ///
    /// This method is the entry point for applying the Visitor pattern to an `Expr` node.
    ///
    /// # Arguments
    ///
    /// * `visitor` - A reference to an object implementing the `ExprVisitor` trait.
    ///
    /// # Type Parameters
    ///
    /// * `T` - The return type of the visitor methods.
    ///
    /// # Returns
    ///
    /// A `Result` containing the result of the visitor's operation or a `RuntimeError`.
    pub fn accept<T>(&self, visitor: &dyn ExprVisitor<T>) -> Result<T, RuntimeError> {
        match self {
            Expr::Literal(expr) => visitor.visit_literal_expr(expr),
            Expr::Grouping(expr) => visitor.visit_grouping_expr(expr),
            Expr::Unary(expr) => visitor.visit_unary_expr(expr),
            Expr::Binary(expr) => visitor.visit_binary_expr(expr),
            Expr::Variable(expr) => visitor.visit_variable_expr(expr),
        }
    }
}

/// Represents a literal value expression in the AST.
#[derive(Debug, Clone)]
pub struct LiteralExpr {
    /// The token representing the literal value.
    pub literal: Token,
}

/// Represents a grouping expression (parenthesized expression) in the AST.
#[derive(Debug, Clone)]
pub struct GroupingExpr {
    /// The left parenthesis token.
    pub paren_open: Token,
    /// The expression contained within the parentheses.
    pub expr: Box<Expr>,
    /// The right parenthesis token.
    pub paren_close: Token,
}

/// Represents a unary expression (e.g., `-5`, `!is_true`) in the AST.
#[derive(Debug, Clone)]
pub struct UnaryExpr {
    /// The operator token (e.g., `-`, `!`).
    pub prefix: Token,
    /// The operand of the unary operation.
    pub operator: Box<Expr>, // Renamed from `operator` to `operand` for clarity
}

/// Represents a binary expression (e.g., `a + b`, `x > y`) in the AST.
#[derive(Debug, Clone)]
pub struct BinaryExpr {
    /// The left-hand side operand of the binary operation.
    pub left: Box<Expr>,
    /// The operator token (e.g., `+`, `-`, `*`, `/`, `==`, `!=`).
    pub operator: Token,
    /// The right-hand side operand of the binary operation.
    pub right: Box<Expr>,
}

/// Wrapper around the variable name token
#[derive(Debug, Clone)]
pub struct VariableExpr {
    pub name: Token,
}
