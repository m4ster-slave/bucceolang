use crate::Token;
use crate::{expr_types::Expr, runtime_error::RuntimeError};

/// Represents the different types of statements in the abstract syntax tree (AST).
///
/// The `Stmt` enum defines the nodes of the statement tree generated by the parser.
#[derive(Debug, Clone)]
pub enum Stmt {
    /// Represents an expression statement (e.g., a literal, grouping, unary or binary expression).
    Expression(Expr),
    /// Represents a print statement.
    Print(Expr),
    /// Represents a variable declaration statement.
    Var(VarStmt),
    /// Represents a block as a list of other statements.
    Block(Vec<Stmt>),
    /// Represents an if statement.
    If(IfStmt),
    /// Represents a while loop statement.
    While(WhileStmt),
    /// Represents a function declaration statement.
    Function(FunctionStmt),
    /// Represents a return statement.
    Return(ReturnStmt),
}

/// Defines the visitor trait for calling the `Stmt` type.
///
/// Types that implement this trait can visit each type of statement defined by the language.
/// This is a key component of the Visitor pattern, used for operations like
/// interpretation or static analysis.
///
/// The type parameter `T` represents the return type of the visitor methods.
pub trait StmtVisitor<T> {
    /// Visits an expression statement.
    fn visit_expr_stmt(&mut self, stmt: &mut Expr) -> Result<T, RuntimeError>;
    /// Visits a print statement.
    fn visit_print_stmt(&mut self, stmt: &mut Expr) -> Result<T, RuntimeError>;
    /// Visits a variable declaration statement.
    fn visit_var_stmt(&mut self, stmt: &mut VarStmt) -> Result<T, RuntimeError>;
    /// Visits a block statement.
    fn visit_block_stmt(&mut self, stmt: &mut Vec<Stmt>) -> Result<T, RuntimeError>;
    /// Visits an if statement.
    fn visit_if_stmt(&mut self, stmt: &mut IfStmt) -> Result<T, RuntimeError>;
    /// Visits a while loop statement.
    fn visit_while_stmt(&mut self, stmt: &mut WhileStmt) -> Result<T, RuntimeError>;
    /// Visits a function declaration statement.
    fn visit_function_stmt(&mut self, stmt: &mut FunctionStmt) -> Result<T, RuntimeError>;
    /// Visits a return statement.
    fn visit_return_stmt(&mut self, stmt: &mut ReturnStmt) -> Result<T, RuntimeError>;
}

impl Stmt {
    /// Evaluates each kind of `Stmt` using the provided visitor and returns the result as type `T`.
    pub fn evaluate<T>(&mut self, visitor: &mut dyn StmtVisitor<T>) -> Result<T, RuntimeError> {
        match self {
            Stmt::Expression(expr) => visitor.visit_expr_stmt(expr),
            Stmt::Print(print_stmt) => visitor.visit_print_stmt(print_stmt),
            Stmt::Var(var_stmt) => visitor.visit_var_stmt(var_stmt),
            Stmt::Block(block_stmt) => visitor.visit_block_stmt(block_stmt),
            Stmt::If(if_stmt) => visitor.visit_if_stmt(if_stmt),
            Stmt::While(while_stmt) => visitor.visit_while_stmt(while_stmt),
            Stmt::Function(function_stmt) => visitor.visit_function_stmt(function_stmt),
            Stmt::Return(return_stmt) => visitor.visit_return_stmt(return_stmt),
        }
    }
}

/// Represents a variable declaration statement.
///
/// Contains the variable's name and an optional initializer expression.
#[derive(Debug, Clone)]
pub struct VarStmt {
    /// The token representing the variable's name.
    pub name: Token,
    /// An optional expression that provides the initial value for the variable.
    pub initializer: Option<Expr>,
}

/// Represents an 'if' statement in the language.
///
/// Contains a condition expression, a branch to execute if the condition is true,
/// and an optional branch to execute if the condition is false.
#[derive(Debug, Clone)]
pub struct IfStmt {
    /// The expression that determines whether the `then_branch` or `else_branch` is executed.
    pub condition: Expr,
    /// The statement to be executed if the `condition` is true.
    pub then_branch: Box<Stmt>,
    /// An optional statement to be executed if the `condition` is false.
    pub else_branch: Option<Box<Stmt>>,
}

/// Represents a 'while' loop statement.
///
/// Contains a condition expression and a body statement that is executed
/// repeatedly as long as the condition evaluates to true.
#[derive(Debug, Clone)]
pub struct WhileStmt {
    /// The expression that determines whether the loop continues to execute.
    pub condition: Expr,
    /// The statement to be repeatedly executed as long as the `condition` is true.
    pub body: Box<Stmt>,
}

/// Represents a function declaration statement.
///
/// Contains the function's name, its parameter list, and its body statements.
#[derive(Debug, Clone)]
pub struct FunctionStmt {
    /// The name of the function.
    pub name: Token,
    /// The parameters of the function.
    pub params: Vec<Token>,
    /// The body of the function as a list of statements.
    pub body: Vec<Stmt>,
}

/// Represents a return statement in a function.
///
/// Contains the return keyword token and an optional value expression.
#[derive(Debug, Clone)]
pub struct ReturnStmt {
    /// The 'return' keyword token.
    pub keyword: Token,
    /// The value to return, if any.
    pub value: Option<Box<Expr>>,
}
